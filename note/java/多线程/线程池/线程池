![1638548970922](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638548970922.png)



不再手动创建线程，而是直接将任务交给线程池，由线程池去执行。

![1638549067686](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549067686.png)

# Executor

线程池的顶级接口

![1638549318937](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549318937.png)



## 



## Executors



底层是封装的ThreadPoolExecutor



```
newCachedThreadPool
/*该线程池在极端情况下,每次提交新的任务都会创建新的线程执行. 适合用来执行大量 
耗时短并且提交频繁的任务
```



## ThreadPoolExecutor



参数含义

![1638549977610](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549977610.png)



根据队列功能的分类

直接提交队列

有界任务队列

无界任务队列

![1638550125030](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638550125030.png)

![1638550193965](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638550193965.png)



 ![1638550349956](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638550349956.png)



先看能不能获得线程，再看能不能进入任务队列



### 监控线程池

![1638588503466](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638588503466.png)



### 扩展线程池

继承。。。重写

![1638588665393](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638588665393.png)

![1638588883823](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638588883823.png)



![1638589214332](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638589214332.png)



![1638589466527](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638589466527.png)

不释放线程，任务无法再申请到线程



### 线程池中的异常处理



## 线程池的基本使用

***创建线程池***

使用Executors

![1638588940952](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638588940952.png)



***提交任务***

submit提交的任务，线程池会吃掉异常

* 改为execute提交
* 对线程池进行扩展，对submit方法进行包装

![1638590005153](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638590005153.png)

![1638590043420](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638590043420.png)



![1638549560955](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549560955.png)  



![1638549598721](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549598721.png)

任务的执行时间大于间隔时间，任务执行完后会直接执行下一次任务



![1638549745231](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638549745231.png)



## 线程池工作流程



## 拒绝策略

线程用完了，队列也满了，怎么办



四个拒绝策略，分为两种

拒绝执行的

拒绝执行并抛出异常(默认)

不抛异常



执行的

将最老的线程抛弃，然后让提交的线程重新提交



**自定义拒绝策略**

就是怎么处理任务太多时的异常

![1638551018119](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638551018119.png)



## 线程工厂



线程池中的线程通过线程工厂创建。当线程池中需要创建线程池时就会调用ThreadFactory的newThread(Runnable r)方法。



**自定义线程工厂**

![1638551204348](C:\Users\11942\AppData\Roaming\Typora\typora-user-images\1638551204348.png)



## 

